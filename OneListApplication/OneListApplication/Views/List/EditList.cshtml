@model OneListApplication.ViewModels.ListViewVM

@{
    ViewBag.Title = "EditList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Html.Partial("~/Views/List/_ListSideBar.cshtml")
<div class="col-md-8">
    <p class="text-danger">
        @Html.Raw(ViewBag.ErrorMsg)
    </p>
    <p class="text-info">
        @Html.Raw(ViewBag.ActionMsg)
    </p>
    <h2>Edit List</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <input type="hidden" value="@Model.ListID"/>
         
                    <div class="col-md-6">
                    @Html.LabelFor(model => model.ListName, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.ListName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ListName, "", new { @class = "text-danger" })
                    </div>
         
                   <div class="col-md-6">
                    @Html.LabelFor(model => model.ListType, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.ListType, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ListType, "", new { @class = "text-danger" })
                    </div>
               
               
                    <div class="col-md-6">
                    @Html.LabelFor(model => model.suscriberRole, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.suscriberRole, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.suscriberRole, "", new { @class = "text-danger" })
                    </div>
               
                    <div class="col-md-6">
                    @Html.LabelFor(model => model.CreationDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.CreationDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreationDate, "", new { @class = "text-danger" })
                    </div>
           <h3 style="float:left; width:100%; text-align: center; ">Tasks on List</h3>
            <div class="form-group row">
                <table id="tableitems" class="table">
                    <thead class="thead-inverse">
                        <tr>
                            <th>Done</th>
                            <th>List Item</th>
                            <th>Price</th>
                            <th>Notes</th>
                            <th>Solved By?</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.items)
                        {
                          
                            <tr id="@item.ItemID">
                                <td ><input id="solved" type="checkbox" value="@item.ListItemSolved" checked="@item.ListItemSolved"/></td>
                                <td>@item.listItemName</td>
                                @if (Model.ListType == "groseries")
                                {
                                    <td><input id="cost" @item.ItemID type="text" value="@item.ListItemCost" /></td>
                                }
                                else
                                {
                                    <td hidden="hidden"><input id="cost" @item.ItemID type="text" value="@item.ListItemCost" /></td>
                                }
                                <td><input id="notes" @item.ItemID type="text" value="@item.ListItemNotes" /></td>
                                <td>@item.ListItemSolverName</td> 
                                <td>
                                  @if (Model.UserType == 0 || Model.UserType ==2)
                                  {
                                    <a class="btn btn-info" onclick="removeRow(@item.ItemID,@item.ListID)"><i class="fa fa-check-circle-o" aria-hidden="true"></i></a>
                                   
                                  }
                                  @if (Model.UserType == 0)
                                  {
                                    <a class="btn btn-danger" href="@Url.Action("DeleteItemList", "List", new { itemID = item.ItemID, id = Model.ListID })"><i class="fa fa-trash-o" aria-hidden="true"></i></a>

                                  }

                                </td>
                            </tr>
                        }
                        
                    </tbody>
                </table>
            </div> 
        </div>
      @Html.ActionLink("Complete List", "CompleteList", "List", new { id = Model.ListID }, new { @class = "btn btn-bk" })
    }

  </div>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script>
        //function to remove row from table
        function removeRow(id,listID)
        {
            var $row = $("#"+id).closest("tr"),        // Finds the closest row <tr> 
            $tds = $row.find("td:nth-child(1)"); // Finds the 2nd <td> element
            //check value in row
            $tx=$("#"+id).closest('tr').find('input:checkbox');
            alert($tx[0].checked);
            //get values for cost
            $txc=$("#"+id).closest('tr').find('input:text');
            alert($txc[0].value);
            alert($txc[1].value);
            $.get("/List/UpdateItemList", {id:listID,itemID:parseInt(id),solved:$tx[0].checked,cost:$txc[0].value,notes:$txc[1].value}, function (data) {  
                alert(data);  
            });
        }
    </script>